{"ast":null,"code":"import { create } from \"zustand\";\nconst initialState = {\n  mode: \"comparison\",\n  loanEstimates: {\n    lenderA: null,\n    lenderB: null\n  },\n  comparisonResult: null,\n  chatMessages: [],\n  transcriptionMessages: [],\n  negotiationSuggestions: [],\n  isRecording: false,\n  isLoading: false,\n  error: null\n};\nexport const useAppStore = create((set, get) => ({\n  ...initialState,\n  setMode: mode => set({\n    mode\n  }),\n  setLoanEstimate: (lender, estimate) => set(state => ({\n    loanEstimates: {\n      ...state.loanEstimates,\n      [lender]: estimate\n    }\n  })),\n  clearLoanEstimates: () => set(state => ({\n    loanEstimates: {\n      lenderA: null,\n      lenderB: null\n    },\n    comparisonResult: null\n  })),\n  setComparisonResult: result => set({\n    comparisonResult: result\n  }),\n  addChatMessage: message => set(state => ({\n    chatMessages: [...state.chatMessages, {\n      ...message,\n      id: Date.now().toString(),\n      timestamp: new Date()\n    }]\n  })),\n  addTranscriptionMessage: message => set(state => ({\n    transcriptionMessages: [...state.transcriptionMessages, {\n      ...message,\n      id: Date.now().toString(),\n      timestamp: new Date()\n    }]\n  })),\n  addNegotiationSuggestion: suggestion => set(state => ({\n    negotiationSuggestions: [...state.negotiationSuggestions, {\n      ...suggestion,\n      id: Date.now().toString(),\n      timestamp: new Date()\n    }]\n  })),\n  clearChatMessages: () => set({\n    chatMessages: []\n  }),\n  clearTranscriptionMessages: () => set({\n    transcriptionMessages: []\n  }),\n  clearNegotiationSuggestions: () => set({\n    negotiationSuggestions: []\n  }),\n  setRecording: isRecording => set({\n    isRecording\n  }),\n  setLoading: isLoading => set({\n    isLoading\n  }),\n  setError: error => set({\n    error\n  }),\n  reset: () => set(initialState)\n}));","map":{"version":3,"names":["create","initialState","mode","loanEstimates","lenderA","lenderB","comparisonResult","chatMessages","transcriptionMessages","negotiationSuggestions","isRecording","isLoading","error","useAppStore","set","get","setMode","setLoanEstimate","lender","estimate","state","clearLoanEstimates","setComparisonResult","result","addChatMessage","message","id","Date","now","toString","timestamp","addTranscriptionMessage","addNegotiationSuggestion","suggestion","clearChatMessages","clearTranscriptionMessages","clearNegotiationSuggestions","setRecording","setLoading","setError","reset"],"sources":["/Users/rubinelyouanbi/Documents/GitHub/fintech-hackathon-dk/frontend/src/store/useAppStore.ts"],"sourcesContent":["import { create } from \"zustand\";\nimport {\n  AppState,\n  AppMode,\n  LoanEstimate,\n  ComparisonResult,\n  ChatMessage,\n  TranscriptionMessage,\n  NegotiationSuggestion,\n} from \"../types\";\n\ninterface AppStore extends AppState {\n  // Actions\n  setMode: (mode: AppMode) => void;\n  setLoanEstimate: (\n    lender: \"lenderA\" | \"lenderB\",\n    estimate: LoanEstimate\n  ) => void;\n  clearLoanEstimates: () => void;\n  setComparisonResult: (result: ComparisonResult) => void;\n  addChatMessage: (message: Omit<ChatMessage, \"id\" | \"timestamp\">) => void;\n  addTranscriptionMessage: (\n    message: Omit<TranscriptionMessage, \"id\" | \"timestamp\">\n  ) => void;\n  addNegotiationSuggestion: (\n    suggestion: Omit<NegotiationSuggestion, \"id\" | \"timestamp\">\n  ) => void;\n  clearChatMessages: () => void;\n  clearTranscriptionMessages: () => void;\n  clearNegotiationSuggestions: () => void;\n  setRecording: (isRecording: boolean) => void;\n  setLoading: (isLoading: boolean) => void;\n  setError: (error: string | null) => void;\n  reset: () => void;\n}\n\nconst initialState: AppState = {\n  mode: \"comparison\",\n  loanEstimates: {\n    lenderA: null,\n    lenderB: null,\n  },\n  comparisonResult: null,\n  chatMessages: [],\n  transcriptionMessages: [],\n  negotiationSuggestions: [],\n  isRecording: false,\n  isLoading: false,\n  error: null,\n};\n\nexport const useAppStore = create<AppStore>((set, get) => ({\n  ...initialState,\n\n  setMode: (mode) => set({ mode }),\n\n  setLoanEstimate: (lender, estimate) =>\n    set((state) => ({\n      loanEstimates: {\n        ...state.loanEstimates,\n        [lender]: estimate,\n      },\n    })),\n\n  clearLoanEstimates: () =>\n    set((state) => ({\n      loanEstimates: {\n        lenderA: null,\n        lenderB: null,\n      },\n      comparisonResult: null,\n    })),\n\n  setComparisonResult: (result) => set({ comparisonResult: result }),\n\n  addChatMessage: (message) =>\n    set((state) => ({\n      chatMessages: [\n        ...state.chatMessages,\n        {\n          ...message,\n          id: Date.now().toString(),\n          timestamp: new Date(),\n        },\n      ],\n    })),\n\n  addTranscriptionMessage: (message) =>\n    set((state) => ({\n      transcriptionMessages: [\n        ...state.transcriptionMessages,\n        {\n          ...message,\n          id: Date.now().toString(),\n          timestamp: new Date(),\n        },\n      ],\n    })),\n\n  addNegotiationSuggestion: (suggestion) =>\n    set((state) => ({\n      negotiationSuggestions: [\n        ...state.negotiationSuggestions,\n        {\n          ...suggestion,\n          id: Date.now().toString(),\n          timestamp: new Date(),\n        },\n      ],\n    })),\n\n  clearChatMessages: () => set({ chatMessages: [] }),\n\n  clearTranscriptionMessages: () => set({ transcriptionMessages: [] }),\n\n  clearNegotiationSuggestions: () => set({ negotiationSuggestions: [] }),\n\n  setRecording: (isRecording) => set({ isRecording }),\n\n  setLoading: (isLoading) => set({ isLoading }),\n\n  setError: (error) => set({ error }),\n\n  reset: () => set(initialState),\n}));\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}